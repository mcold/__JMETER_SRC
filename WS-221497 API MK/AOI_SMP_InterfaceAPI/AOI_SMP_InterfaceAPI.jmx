<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="AOI_SMP_InterfaceAPI" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="ip" elementType="Argument">
            <stringProp name="Argument.name">ip</stringProp>
            <stringProp name="Argument.value">${__P(IP, 192.168.16.206)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">8080</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="url" elementType="Argument">
            <stringProp name="Argument.name">url</stringProp>
            <stringProp name="Argument.value">${__P(URL, /wsdl/AOI_SMP_InterfaceAPI/SMPInterfaceAPI)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="db_ip" elementType="Argument">
            <stringProp name="Argument.name">db_ip</stringProp>
            <stringProp name="Argument.value">${__P(DB_IP, 192.168.17.100)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="db_port" elementType="Argument">
            <stringProp name="Argument.name">db_port</stringProp>
            <stringProp name="Argument.value">${__P(DB_PORT, 1521)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="service_name" elementType="Argument">
            <stringProp name="Argument.name">service_name</stringProp>
            <stringProp name="Argument.value">${__P(SERVICE_NAME, db)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TYPE_REC" elementType="Argument">
            <stringProp name="Argument.name">TYPE_REC</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RECURRENT_STRING" elementType="Argument">
            <stringProp name="Argument.name">RECURRENT_STRING</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AMOUNT" elementType="Argument">
            <stringProp name="Argument.name">AMOUNT</stringProp>
            <stringProp name="Argument.value">${__P(AMOUNT, 50000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FEE" elementType="Argument">
            <stringProp name="Argument.name">FEE</stringProp>
            <stringProp name="Argument.value">${__P(FEE, 100)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="SMP DB CONNECT" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">select 1 from dual</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="connectionProperties"></stringProp>
        <stringProp name="dataSource">SMP</stringProp>
        <stringProp name="dbUrl">${__P(DATABASE_URL)}</stringProp>
        <stringProp name="driver">oracle.jdbc.OracleDriver</stringProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">${__P(DB_PASSWORD)}</stringProp>
        <stringProp name="poolMax">5</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">${__P(DB_SCHEMA)}</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="SMP DB CONNECT" enabled="false">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">select 1 from dual</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="connectionProperties"></stringProp>
        <stringProp name="dataSource">SMP</stringProp>
        <stringProp name="dbUrl">jdbc:oracle:thin:@(DESCRIPTION =     (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.12.157)(PORT = 1521))     (CONNECT_DATA =       (SERVER = DEDICATED)       (SERVICE_NAME = pc11g)     )   )</stringProp>
        <stringProp name="driver">oracle.jdbc.OracleDriver</stringProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">SMP_T2_RUS</stringProp>
        <stringProp name="poolMax">5</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">SMP_T2_RUS</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="!!! DEL ME SET TYPE REC" enabled="false">
        <stringProp name="scriptLanguage">groovy</stringProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="cacheKey">true</stringProp>
        <stringProp name="script">props.put(&quot;TYPE_REC&quot;, 2); // 1 - обычные, 2 - реккурентные, 3 - смешанные</stringProp>
      </JSR223PreProcessor>
      <hashTree/>
      <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="GET MAX PcTransId" enabled="true">
        <stringProp name="dataSource">SMP</stringProp>
        <stringProp name="query">SELECT MAX(TR.PC_TRANS_ID) AS PC_MAX_ID
  FROM T_TRANSACTION TR</stringProp>
        <stringProp name="queryArguments"></stringProp>
        <stringProp name="queryArgumentsTypes"></stringProp>
        <stringProp name="queryTimeout"></stringProp>
        <stringProp name="queryType">Select Statement</stringProp>
        <stringProp name="resultSetHandler">Store as String</stringProp>
        <stringProp name="resultSetMaxRows"></stringProp>
        <stringProp name="resultVariable"></stringProp>
        <stringProp name="variableNames">PC_MAX_ID</stringProp>
      </JDBCPreProcessor>
      <hashTree/>
      <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="TRANSLATE MAX" enabled="true">
        <stringProp name="scriptLanguage">groovy</stringProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="cacheKey">false</stringProp>
        <stringProp name="script">String max_id = vars.get(&quot;PC_MAX_ID_1&quot;);
int next_id = max_id.toInteger();
props.put(&quot;PcTransIdMAX&quot;, next_id.toString());</stringProp>
      </JSR223PreProcessor>
      <hashTree/>
      <com.blazemeter.jmeter.threads.arrivals.ArrivalsThreadGroup guiclass="com.blazemeter.jmeter.threads.arrivals.ArrivalsThreadGroupGui" testclass="com.blazemeter.jmeter.threads.arrivals.ArrivalsThreadGroup" testname="CYCLE" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${__P(THREADS, 1)}</stringProp>
        <stringProp name="RampUp">${__P(RAMP_UP_SEC, 1)}</stringProp>
        <stringProp name="Steps">${__P(RAMP_UP_CNT, 1)}</stringProp>
        <stringProp name="Hold">${__P(HOLD_RATE_SEC, 0)}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="ConcurrencyLimit"></stringProp>
        <stringProp name="Unit">S</stringProp>
      </com.blazemeter.jmeter.threads.arrivals.ArrivalsThreadGroup>
      <hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="T RECCURENT" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>100.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF TYPE REC" enabled="true">
            <stringProp name="IfController.condition">&quot;${TYPE_REC}&quot;==1</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="SET RECURRENT STRING" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">String[] vals = [&quot;0&quot;, &quot;1&quot;]
String rec_id = (vals[new Random().nextInt(vals.length)]);

if(rec_id == &quot;0&quot;){
	vars.put(&quot;RECURRENT_STRING&quot;, &quot;&lt;smp:recurrentId&gt;0&lt;/smp:recurrentId&gt;&quot;);
}
</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF TYPE REC" enabled="true">
            <stringProp name="IfController.condition">&quot;${TYPE_REC}&quot;==0</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="SET RECURRENT STRING" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="RECURRENT_STRING" elementType="Argument">
                  <stringProp name="Argument.name">RECURRENT_STRING</stringProp>
                  <stringProp name="Argument.value">&lt;smp:recurrentId&gt;0&lt;/smp:recurrentId&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="DEBUG" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="RESULT TREE" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="PROC" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>100.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP DEFAULT" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ip}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/${url}</stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </ConfigTestElement>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="DATA SET" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="Amount" elementType="Argument">
                <stringProp name="Argument.name">Amount</stringProp>
                <stringProp name="Argument.value">${__P(AMOUNT, 50000)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Fee" elementType="Argument">
                <stringProp name="Argument.name">Fee</stringProp>
                <stringProp name="Argument.value">${__P(FEE, 100)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Comment" elementType="Argument">
                <stringProp name="Argument.name">Comment</stringProp>
                <stringProp name="Argument.value">TEST</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="GET PcTransId" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">String max_id = props.get(&quot;PcTransIdMAX&quot;);
int pc_trans_id = max_id.toInteger() + ${__threadNum};
vars.put(&quot;PcTransId&quot;, pc_trans_id.toString());

</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="PROVE" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
            <boolProp name="IfController.evaluateAll">true</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="GET RANDOM DATA" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import org.apache.commons.io.FileUtils;

//ПЦ
List pc_lines = FileUtils.readLines(new File(&quot;D:/ProtiIes/Holodnuk-M/Documents/WORK DIRS/JMETER/WS-221497 API MK/DATA/PC.csv&quot;));
int pc_random = new Random().nextInt(pc_lines.size());
String pc_line = pc_lines.get(pc_random);
String pc_id = pc_line.split(&quot;;&quot;)[0];
String UserName = pc_line.split(&quot;;&quot;)[1];
String Password = pc_line.split(&quot;;&quot;)[2];
String ConfigNotif = pc_line.split(&quot;;&quot;)[3];


vars.put(&quot;UserName&quot;, UserName);
vars.put(&quot;Password&quot;, Password);
vars.put(&quot;ConfigNotif&quot;, ConfigNotif);



// продукт
List g_lines = FileUtils.readLines(new File(&quot;D:/ProtiIes/Holodnuk-M/Documents/WORK DIRS/JMETER/WS-221497 API MK/DATA/GOOD_&quot; + pc_id + &quot;.csv&quot;));
int g_random = new Random().nextInt(g_lines.size());
String g_line = g_lines.get(g_random);

String good_id = g_line.split(&quot;;&quot;)[0];
String src_payment = g_line.split(&quot;;&quot;)[1];


vars.put(&quot;ProductID&quot;, good_id); 
vars.put(&quot;SourcePayment&quot;, src_payment);


// MSISDN
//List ms_lines = FileUtils.readLines(new File(&quot;MSISDN.csv&quot;));
//int ms_random = new Random().nextInt(ms_lines.size());
//String msisdn = ms_lines.get(ms_random);
//
//vars.put(&quot;MSISDN&quot;, msisdn);</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="InitPayment" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:smp=&quot;http://www.bercut.com/schema/SMPTypeAPI&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;smp:InitPaymentRequest&gt;&#xd;
         &lt;smp:userNameExternalSystem&gt;${UserName}&lt;/smp:userNameExternalSystem&gt;&#xd;
         &lt;smp:userPasswordExternalSystem&gt;${Password}&lt;/smp:userPasswordExternalSystem&gt;&#xd;
         &lt;smp:msisdn&gt;${__P(MSISDN, 79539965291)}&lt;/smp:msisdn&gt;&#xd;
         &lt;smp:codeGoods&gt;${ProductID}&lt;/smp:codeGoods&gt;&#xd;
         &lt;smp:payIdExternal&gt;${PcTransId}&lt;/smp:payIdExternal&gt;&#xd;
         &lt;smp:amount&gt;${AMOUNT}&lt;/smp:amount&gt;&#xd;
         &lt;smp:fee&gt;${FEE}&lt;/smp:fee&gt;&#xd;
         &lt;smp:sourcePayment&gt;${SourcePayment}&lt;/smp:sourcePayment&gt;&#xd;
         &lt;smp:comment&gt;test&lt;/smp:comment&gt;&#xd;
         &lt;smp:transportType&gt;USSD&lt;/smp:transportType&gt;&#xd;
         &lt;smp:templateMessages&gt;&lt;/smp:templateMessages&gt;&#xd;
         &lt;smp:fcsEmail&gt;&lt;/smp:fcsEmail&gt;&#xd;
         &lt;smp:fcsMsisdn&gt;&lt;/smp:fcsMsisdn&gt;&#xd;
         ${RECURRENT_STRING}&#xd;
      &lt;/smp:InitPaymentRequest&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="GET RESULT" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">INIT_STATUS</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;ber-ns0:status&gt;(.*)&lt;\/ber-ns0:status&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="GET PAY_ID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">PAY_ID</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;ber-ns0:payId&gt;(.*)&lt;\/ber-ns0:payId&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="GET STATUS" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">INIT_STATUS</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;ber-ns0:status&gt;(.*)&lt;\/ber-ns0:status&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="DEBUG" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="RESULT TREE" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>true</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <sentBytes>true</sentBytes>
                    <url>true</url>
                    <threadCounts>true</threadCounts>
                    <idleTime>true</idleTime>
                    <connectTime>true</connectTime>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CheckPaymentStatus" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:smp=&quot;http://www.bercut.com/schema/SMPTypeAPI&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;smp:CheckPaymentStatusRequest&gt;&#xd;
         &lt;smp:userNameExternalSystem&gt;${UserName}&lt;/smp:userNameExternalSystem&gt;&#xd;
         &lt;smp:userPasswordExternalSystem&gt;${Password}&lt;/smp:userPasswordExternalSystem&gt;&#xd;
         &lt;smp:payId&gt;${PAY_ID}&lt;/smp:payId&gt;&#xd;
      &lt;/smp:CheckPaymentStatusRequest&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">192.168.16.206</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/wsdl/AOI_SMP_InterfaceAPI/SMPInterfaceAPI</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="GET STATUS" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">CHECK_STATUS</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;ber-ns0:status&gt;(.*)&lt;\/ber-ns0:status&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="GET RESULT" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">CHECK_RESULT</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;ber-ns0:result&gt;(.*)&lt;\/ber-ns0:result&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="GET RECURRENT ID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">RECURRENT_ID</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;ber-ns0:recurrentId&gt;(.*)&lt;\/ber-ns0:recurrentId&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="DEBUG" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="RESULT TREE" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>true</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <sentBytes>true</sentBytes>
                    <url>true</url>
                    <threadCounts>true</threadCounts>
                    <idleTime>true</idleTime>
                    <connectTime>true</connectTime>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetRecurrentList" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:smp=&quot;http://www.bercut.com/schema/SMPTypeAPI&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;smp:GetRecurrentListRequest&gt;&#xd;
         &lt;smp:userNameExternalSystem&gt;${UserName}&lt;/smp:userNameExternalSystem&gt;&#xd;
         &lt;smp:userPasswordExternalSystem&gt;${Password}&lt;/smp:userPasswordExternalSystem&gt;&#xd;
         &lt;smp:FilterSubscriber&gt;${__P(MSISDN, 79539965291)}&lt;/smp:FilterSubscriber&gt;&#xd;
         &lt;smp:recurrentStatus&gt;All&lt;/smp:recurrentStatus&gt;&#xd;
         &lt;smp:stime&gt;${__time(YYY-MM-dd)}&lt;/smp:stime&gt;&#xd;
      &lt;/smp:GetRecurrentListRequest&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">192.168.16.206</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/wsdl/AOI_SMP_InterfaceAPI/SMPInterfaceAPI</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="DEBUG" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="RESULT TREE" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>true</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <sentBytes>true</sentBytes>
                    <url>true</url>
                    <threadCounts>true</threadCounts>
                    <idleTime>true</idleTime>
                    <connectTime>true</connectTime>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CancelRecurrent" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:smp=&quot;http://www.bercut.com/schema/SMPTypeAPI&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;smp:CancelRecurrentRequest&gt;&#xd;
          &lt;smp:userNameExternalSystem&gt;${UserName}&lt;/smp:userNameExternalSystem&gt;&#xd;
          &lt;smp:userPasswordExternalSystem&gt;${Password}&lt;/smp:userPasswordExternalSystem&gt;&#xd;
	  &lt;smp:FilterSubscriber&gt;&#xd;
          	&lt;smp:msisdn&gt;${__P(MSISDN, 79539965291)}&lt;/smp:msisdn&gt;&#xd;
	  &lt;/smp:FilterSubscriber&gt;&#xd;
          &lt;smp:RecurrentList&gt;&#xd;
		&lt;recurrentId&gt;${RECURRENT_ID}&lt;/recurrentId&gt;&#xd;
          &lt;/smp:RecurrentList&gt;&#xd;
      &lt;/smp:CancelRecurrentRequest&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">192.168.16.206</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/wsdl/AOI_SMP_InterfaceAPI/SMPInterfaceAPI</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="DEBUG" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="RESULT TREE" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>true</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <sentBytes>true</sentBytes>
                    <url>true</url>
                    <threadCounts>true</threadCounts>
                    <idleTime>true</idleTime>
                    <connectTime>true</connectTime>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetSubscriberInfo" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:smp=&quot;http://www.bercut.com/schema/SMPTypeAPI&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;smp:GetSubscriberInfoRequest&gt;&#xd;
         &lt;smp:userNameExternalSystem&gt;${UserName}&lt;/smp:userNameExternalSystem&gt;&#xd;
         &lt;smp:userPasswordExternalSystem&gt;${Password}&lt;/smp:userPasswordExternalSystem&gt;&#xd;
         &lt;smp:msisdn&gt;${__P(MSISDN, 79539965291)}&lt;/smp:msisdn&gt;&#xd;
		&lt;smp:dateTime&gt;${__time(YYY-MM-dd)}&lt;/smp:dateTime&gt;&#xd;
      &lt;/smp:GetSubscriberInfoRequest&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">192.168.16.206</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/wsdl/AOI_SMP_InterfaceAPI/SMPInterfaceAPI</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="DEBUG" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>true</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <sentBytes>true</sentBytes>
                    <url>true</url>
                    <threadCounts>true</threadCounts>
                    <idleTime>true</idleTime>
                    <connectTime>true</connectTime>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetTransactionList" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:smp=&quot;http://www.bercut.com/schema/SMPTypeAPI&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;smp:GetTransactionListRequest&gt;&#xd;
         &lt;smp:userNameExternalSystem&gt;${UserName}&lt;/smp:userNameExternalSystem&gt;&#xd;
         &lt;smp:userPasswordExternalSystem&gt;${Password}&lt;/smp:userPasswordExternalSystem&gt;&#xd;
         &lt;smp:FilterSubscriber&gt;&#xd;
             &lt;smp:msisdn&gt;${__P(MSISDN, 79539965291)}&lt;/smp:msisdn&gt;&#xd;
		&lt;/smp:FilterSubscriber&gt;&#xd;
	     &lt;smp:recurrentId&gt;${RECURRENT_ID}&lt;/smp:recurrentId&gt;&#xd;
		&lt;smp:stime&gt;${__time(YYY-MM-dd)}&lt;/smp:stime&gt;&#xd;
      &lt;/smp:GetTransactionListRequest&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">192.168.16.206</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/wsdl/AOI_SMP_InterfaceAPI/SMPInterfaceAPI</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="DEBUG" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>true</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <sentBytes>true</sentBytes>
                    <url>true</url>
                    <threadCounts>true</threadCounts>
                    <idleTime>true</idleTime>
                    <connectTime>true</connectTime>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetCommerceBalanceRequest" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:smp=&quot;http://www.bercut.com/schema/SMPTypeAPI&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;smp:GetCommerceBalanceRequest&gt;&#xd;
         &lt;smp:userNameExternalSystem&gt;${UserName}&lt;/smp:userNameExternalSystem&gt;&#xd;
         &lt;smp:userPasswordExternalSystem&gt;${Password}&lt;/smp:userPasswordExternalSystem&gt;&#xd;
         &lt;smp:msisdn&gt;${__P(MSISDN, 79539965291)}&lt;/smp:msisdn&gt;&#xd;
         &lt;smp:dateTime&gt;${__time(YYY-MM-dd)}&lt;/smp:dateTime&gt;&#xd;
      &lt;/smp:GetCommerceBalanceRequest&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">192.168.16.206</stringProp>
              <stringProp name="HTTPSampler.port">8080</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/wsdl/AOI_SMP_InterfaceAPI/SMPInterfaceAPI</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="DEBUG" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>true</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <sentBytes>true</sentBytes>
                    <url>true</url>
                    <threadCounts>true</threadCounts>
                    <idleTime>true</idleTime>
                    <connectTime>true</connectTime>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="RESULT TREE" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
        <boolProp name="displayJMeterProperties">false</boolProp>
        <boolProp name="displayJMeterVariables">true</boolProp>
        <boolProp name="displaySamplerProperties">true</boolProp>
        <boolProp name="displaySystemProperties">false</boolProp>
      </DebugPostProcessor>
      <hashTree/>
      <kg.apc.jmeter.dbmon.DbMonCollector guiclass="kg.apc.jmeter.vizualizers.DbMonGui" testclass="kg.apc.jmeter.dbmon.DbMonCollector" testname="jp@gc - DbMon Samples Collector" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">D:\ProtiIes\Holodnuk-M\Documents\WORK DIRS\JMETER\WS-221497 API MK\DbMon.csv</stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
        <collectionProp name="samplers">
          <collectionProp name="-683253188">
            <stringProp name="82230">SMP</stringProp>
            <stringProp name="66952">CPU</stringProp>
            <stringProp name="1237">false</stringProp>
            <stringProp name="866277958">SELECT round(h.value, 2)   FROM v$sysmetric_history h  WHERE metric_name = &apos;Host CPU Utilization (%)&apos;    and h.BEGIN_TIME &gt; sysdate - 1/24/60/2</stringProp>
          </collectionProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">grant select on v_$sysmetric_history to SMP_T2_RUS;</stringProp>
      </kg.apc.jmeter.dbmon.DbMonCollector>
      <hashTree/>
      <kg.apc.jmeter.reporters.ConsoleStatusLogger guiclass="kg.apc.jmeter.reporters.ConsoleStatusLoggerGui" testclass="kg.apc.jmeter.reporters.ConsoleStatusLogger" testname="jp@gc - Console Status Logger" enabled="true"/>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
